{"version":3,"file":"static/js/11.29f59437.chunk.js","mappings":"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","sources":["api.js","components/CitiesList/CitiesList.jsx","components/SearchCityForm/SearchCityForm.jsx","pages/Home/Home.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL =\r\n  \"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services\";\r\nconst API_KEY = \"E4W5RGXKFH3UTAD62NKRRA3L3\";\r\n\r\nconst fetchWeatherForCities = async (\r\n  controller,\r\n  cities = \"London%2CUK%7CParis%2CFrance%7CTokyo%2CJapan\"\r\n) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timelinemulti?key=${API_KEY}&locations=${cities}`,\r\n      { signal: controller.signal }\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchCityWeatherForToday = async (controller, city = \"Berlin\") => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timeline/${city}/today?unitGroup=metric&include=days\r\n&key=${API_KEY}&contentType=json`,\r\n      { signal: controller.signal }\r\n    );\r\n    console.log(data);\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst fetchCityWeatherForDays = async (\r\n  controller,\r\n  city = \"Berlin\"\r\n) => {\r\n  try {\r\n    const { data } = await axios.get(\r\n      `/timeline/${city}/next7days?unitGroup=metric&include=days&key=${API_KEY}&contentType=json`,\r\n      { signal: controller.signal }\r\n    );\r\n    return data;\r\n  } catch (error) {\r\n    if (error.code !== \"ERR_CANCELED\") {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n};\r\n\r\nconst api = {\r\n  fetchWeatherForCities,\r\n  fetchCityWeatherForDays,\r\n  fetchCityWeatherForToday,\r\n};\r\n\r\nexport default api;\r\n\r\n/* request FROM DATE TO DATE for the city:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/[city]/[date1]/[date2]?unitGroup=metric&amp;include=days&amp;key=YOUR_API_KEY&amp;contentType=json\r\n\r\nfor example:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/London,UK/2020-10-01/2020-12-31?key=YOUR_API_KEY \r\n*/\r\n\r\n/*\r\nrequest for today's weather in the city:\r\nhttps://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/[city]/today?unitGroup=metric&amp;include=days\r\n&amp;key=YOUR_API_KEY&amp;contentType=json\r\n\r\n\r\n*/\r\n","import { NavLink } from \"react-router-dom\";\r\n\r\nconst CitiesList = ({ weatherList }) => {\r\n  return (\r\n    <ul>\r\n      {weatherList.map((city) => {\r\n        const tempMax = Math.round((city.days[0].tempmax - 32) / 1.8);\r\n        const tempMin = Math.round((city.days[0].tempmin - 32) / 1.8);\r\n        return (\r\n          <li key={city.address}>\r\n            <h3>{city.address}</h3>\r\n            <img\r\n              src={`https://raw.githubusercontent.com/visualcrossing/WeatherIcons/main/PNG/1st%20Set%20-%20Color/${city.days[0].icon}.png`}\r\n              alt={city.days[0].icon}\r\n            />\r\n            <p>{city.days[0].conditions}</p>\r\n            <p>\r\n              {tempMin}&deg;C - {tempMax}&deg;C\r\n            </p>\r\n            <NavLink to={`/:${city.address}`}>See detailed forecast</NavLink>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CitiesList;\r\n","import { BsSearch } from \"react-icons/bs\";\r\n\r\nconst SearchCityForm = ({ onSubmit }) => {\r\n  return (\r\n    <form onSubmit={(e) => onSubmit(e)}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"city\"\r\n        autoComplete=\"off\"\r\n        autoFocus\r\n        placeholder=\"Write searching city...\"\r\n      />\r\n      <button type=\"submit\">\r\n        <BsSearch />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchCityForm;\r\n","import { useState, useEffect } from \"react\";\r\nimport api from \"../../api\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport CitiesList from \"../../components/CitiesList/CitiesList\";\r\nimport SearchCityForm from \"../../components/SearchCityForm/SearchCityForm\";\r\n// import { useSearchParams } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const [weatherList, setweatherList] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n\r\n    const fetchWeatherList = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { locations } = await api.fetchWeatherForCities(controller);\r\n        setweatherList([...locations]);\r\n      } catch (error) {\r\n        if (error.code !== \"ERR_CANCELED\") {\r\n          setError(error.message);\r\n        }\r\n        setError(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchWeatherList();\r\n    return () => {\r\n      controller.abort();\r\n    };\r\n  }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      <h2>Weather forecast in different cities</h2>\r\n      <SearchCityForm onSubmit={onSubmit} />\r\n      {weatherList && <CitiesList weatherList={weatherList} />}\r\n      {loading && <Loader loading={loading} />}\r\n      {error && <p>Sorry, something went wrong. Please, try to update page.</p>}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["axios","defaults","baseURL","API_KEY","fetchWeatherForCities","async","controller","cities","arguments","length","undefined","data","get","concat","signal","error","code","console","log","message","fetchCityWeatherForDays","city","fetchCityWeatherForToday","_ref","weatherList","_jsx","children","map","tempMax","Math","round","days","tempmax","tempMin","tempmin","_jsxs","address","src","icon","alt","conditions","NavLink","to","onSubmit","e","type","name","autoComplete","autoFocus","placeholder","BsSearch","Home","setweatherList","useState","loading","setLoading","setError","useEffect","AbortController","locations","api","fetchWeatherList","abort","SearchCityForm","preventDefault","CitiesList","Loader"],"sourceRoot":""}